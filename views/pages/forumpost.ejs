<!-- Created by Michael Piercey -->

<!DOCTYPE html>
<html lang="en">

<!-- Include the head -->
<%- include('../partials/head.ejs', { title: 'Forum | PlacementHub', cssFiles: ['/styles/forumpages.css', '/styles/nav.css'], bootstrap: true, infolder: true }) %>

<body>

<!-- Include the navbar -->
<%- include('../partials/nav.ejs', { currentPage: 'forum', infolder: true }) %>

<main class="main">
    <div class="main-header">
        <h1 class="main-title"><%= category %> - <%= subcategory %></h1>
    </div>
    <div class="main-cards">

        <% if (posts.length === 0) { %>
            <p>No posts available for this category and subcategory.</p>
        <% } else { %>
            <% posts.forEach(post => { %>
                <div class="card">
                    <!-- User Info -->
                    <div class="user-info">
                        <img src="../<%= post.userPhoto %>" alt="User Photo" class="user-photo" />
                        <div class="user-details">
                            <p class="user-name"><%= post.userName %></p>
                            <p class="user-course"><%= post.userCourse %></p>
                        </div>
                        <p class="post-date"><%= post.postDate %></p>
                    </div>

                    <div class="divider"></div>

                    <p class="post-title"><%= post.title %></p>
                    <p class="post-content"><%= post.content %></p>

                    <% if (post.image) { %>
                        <img src="../img/postimg/<%= post.image %>" alt="Post Image" class="post-image" id="post-image" />
                    <% } %>

                    <!-- Action Buttons -->
                    <div class="post-actions">
                        <button class="upvote" data-id="<%= post.forumId %>" id="upvote-button-<%= post.forumId %>">
                            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                                <path d="M8 0L16 10H0L8 0z"></path>
                            </svg>
                            Upvote <b><span id="upvote-count-<%= post.forumId %>"><%= post.upVotes %></span></b>
                        </button>

                        <button class="downvote" data-id="<%= post.forumId %>" id="downvote-button-<%= post.forumId %>">
                            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                                <path d="M8 10L0 0h16L8 10z"></path>
                            </svg>
                            Downvote <b><span id="downvote-count-<%= post.forumId %>"><%= post.downVotes %></span></b>
                        </button>

                        <button class="comment">
                            <svg width="16" height="16" viewBox="0 0 32 32" fill="currentColor">
                                <path style="fill:#010002;" d="M27.184,1.605H2.156C0.967,1.605,0,2.572,0,3.76v17.572c0,1.188,0.967,2.155,2.156,2.155h13.543
                                    l5.057,3.777c0.414,0.31,0.842,0.468,1.268,0.468c0.789,0,1.639-0.602,1.637-1.923v-2.322h3.523c1.188,0,2.154-0.967,2.154-2.155
                                    V3.76C29.338,2.572,28.371,1.605,27.184,1.605z M27.34,21.332c0,0.085-0.068,0.155-0.154,0.155h-5.523v3.955l-5.297-3.956H2.156
                                    c-0.086,0-0.154-0.07-0.154-0.155V3.759c0-0.085,0.068-0.155,0.154-0.155v0.001h25.029c0.086,0,0.154,0.07,0.154,0.155
                                    L27.34,21.332L27.34,21.332z"/>
                            </svg>
                            Comment <b><%= post.comments %></b>
                        </button>
                    </div>

                    <!-- Hidden input to store the user's current vote status -->
                    <input type="hidden" id="vote-status-<%= post.forumId %>" value="<%= post.userVoteStatus %>" />
                </div>
            <% }); %>
        <% } %>
    </div>
</main>

<%- include('../partials/footer.ejs') %>



<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Select all upvote and downvote buttons
        const upvoteButtons = document.querySelectorAll('.upvote');
        const downvoteButtons = document.querySelectorAll('.downvote');

        // Add click event listeners for each upvote button
        upvoteButtons.forEach(button => {
            button.addEventListener('click', () => {
                const postId = button.getAttribute('data-id');
                handleVote(postId, 'upvote');
            });
        });

        // Add click event listeners for each downvote button
        downvoteButtons.forEach(button => {
            button.addEventListener('click', () => {
                const postId = button.getAttribute('data-id');
                handleVote(postId, 'downvote');
            });
        });
    });

    // Function to handle the voting process
    function handleVote(postId, voteType) {
        // Elements related to the specific post vote
        const upvoteButton = document.getElementById(`upvote-button-${postId}`);
        const downvoteButton = document.getElementById(`downvote-button-${postId}`);
        const upvoteCountElement = document.getElementById(`upvote-count-${postId}`);
        const downvoteCountElement = document.getElementById(`downvote-count-${postId}`);
        const voteStatusElement = document.getElementById(`vote-status-${postId}`);

        // Get the current vote status of the user
        let currentVote = voteStatusElement.value;

        // Set the action type for the server
        let action = 'add'; // Default action to add a vote
        if ((voteType === 'upvote' && currentVote === 'upvote') || (voteType === 'downvote' && currentVote === 'downvote')) {
            action = 'remove'; // Remove the vote if the user clicks the same vote button
        }

        // Send the vote to the server (database update)
        sendVoteToServer(postId, voteType, action)
            .then(response => {
                if (response.success) {
                    // Update UI only if the server confirmed the vote change
                    updateVoteUI(postId, voteType, action, upvoteButton, downvoteButton, upvoteCountElement, downvoteCountElement, voteStatusElement);
                } else {
                    alert("There was an issue processing your vote. Please try again.");
                }
            })
            .catch(err => {
                console.error("Error communicating with the server:", err);
                alert("Unable to reach the server. Please try again later.");
            });
    }

    // Function to send the voting information to the server
    function sendVoteToServer(postId, voteType, action) {
        return fetch('/addvote', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ postId, voteType, action })
        })
        .then(response => response.json());
    }

    // Function to update the UI to reflect the vote state
    function updateVoteUI(postId, voteType, action, upvoteButton, downvoteButton, upvoteCountElement, downvoteCountElement, voteStatusElement) {
        // Reset the button colors
        upvoteButton.style.backgroundColor = '';
        downvoteButton.style.backgroundColor = '';

        // Update the vote counts and button colors based on action and voteType
        if (action === 'remove') {
            if (voteType === 'upvote') {
                upvoteCountElement.innerText = parseInt(upvoteCountElement.innerText) - 1;
                voteStatusElement.value = ''; // Reset vote status
            } else if (voteType === 'downvote') {
                downvoteCountElement.innerText = parseInt(downvoteCountElement.innerText) - 1;
                voteStatusElement.value = ''; // Reset vote status
            }
        } else if (action === 'add') {
            if (voteType === 'upvote') {
                upvoteCountElement.innerText = parseInt(upvoteCountElement.innerText) + 1;
                voteStatusElement.value = 'upvote';
                upvoteButton.style.backgroundColor = '#4CAF50'; // Set green background
                if (voteStatusElement.value === 'downvote') {
                    downvoteCountElement.innerText = parseInt(downvoteCountElement.innerText) - 1; // Remove downvote if switching
                }
            } else if (voteType === 'downvote') {
                downvoteCountElement.innerText = parseInt(downvoteCountElement.innerText) + 1;
                voteStatusElement.value = 'downvote';
                downvoteButton.style.backgroundColor = '#F44336'; // Set red background
                if (voteStatusElement.value === 'upvote') {
                    upvoteCountElement.innerText = parseInt(upvoteCountElement.innerText) - 1; // Remove upvote if switching
                }
            }
        }
    }
</script>

</body>
</html>
