<!-- Created by Michael Piercey -->

<!DOCTYPE html>
<html lang="en">

<!-- Include the head -->
<%- include('../partials/head.ejs', { title: 'Forum | PlacementHub', cssFiles: ['/styles/forumpages.css', '/styles/nav.css'], bootstrap: true, infolder: true  }) %>

<body>

<!-- Include the navbar -->
<%- include('../partials/nav.ejs', { currentPage: 'forum', infolder: true }) %>

<main class="main">
    <div class="main-header">
        <h1 class="main-title"><%= category %> - <%= subcategory %></h1>
    </div>
    <div class="main-cards">

        <% if (posts.length === 0) { %>
            <p>No posts available for this category and subcategory.</p>
        <% } else { %>
            <% posts.forEach(post => { %>
                <div class="card">
                    <!-- User Info -->
                    <div class="user-info">
                        <!-- User Photo -->
                        <img src="../<%= post.userPhoto %>" alt="User Photo" class="user-photo" />
                    
                        <!-- User Details -->
                        <div class="user-details">
                            <p class="user-name"><%= post.userName %></p>
                            <p class="user-course"><%= post.userCourse %></p>
                        </div>
                    
                        <!-- Post Date -->
                        <p class="post-date"><%= post.postDate %></p>
                    </div>
                    
                    
                    <!-- Divider -->
                    <div class="divider"></div>
                    
                    <!-- Forum Post Title -->
                    <p class="post-title"><%= post.title %></p>
                    <p class="post-content"><%= post.content %></p>

                    <% if (post.image) { %>
                        <img src="../img/postimg/<%= post.image %>" alt="Post Image" class="post-image" id="post-image" />
                    <% } %>
                    
                    <!-- Action Buttons -->
                    <div class="post-actions">
                        <!-- Upvote Button -->
                        <div class="post" data-post-id="<%= post.forumId %>">
                            <button class="vote-button" data-post-id="<%= post.forumId %>" data-vote-type="upvote">Upvote</button>
                            <span id="upvotes-<%= post.forumId %>"><%= post.upVotes %></span>
                        
                            <button class="vote-button" data-post-id="<%= post.forumId %>" data-vote-type="downvote">Downvote</button>
                            <span id="downvotes-<%= post.forumId %>"><%= post.downVotes %></span>
                        </div>
                        
                    
                        <!-- Comment Button -->
                        <button class="comment">
                            <svg width="16" height="16" viewBox="0 0 32 32" fill="currentColor">
                                <path style="fill:#010002;" d="M27.184,1.605H2.156C0.967,1.605,0,2.572,0,3.76v17.572c0,1.188,0.967,2.155,2.156,2.155h13.543
                                    l5.057,3.777c0.414,0.31,0.842,0.468,1.268,0.468c0.789,0,1.639-0.602,1.637-1.923v-2.322h3.523c1.188,0,2.154-0.967,2.154-2.155
                                    V3.76C29.338,2.572,28.371,1.605,27.184,1.605z M27.34,21.332c0,0.085-0.068,0.155-0.154,0.155h-5.523v3.955l-5.297-3.956H2.156
                                    c-0.086,0-0.154-0.07-0.154-0.155V3.759c0-0.085,0.068-0.155,0.154-0.155v0.001h25.029c0.086,0,0.154,0.07,0.154,0.155
                                    L27.34,21.332L27.34,21.332z"/>
                            </svg>
                            Comment <b><%= post.comments %></b>
                        </button>
                    </div>
                </div>
            <% }); %>
        <% } %>
    </div>
</main>

<%- include('../partials/footer.ejs') %>

</body>

<!-- links to bootstrap js and jquery -->
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
<script src="/scripts/forumpages.js"></script>

<script>

document.addEventListener('DOMContentLoaded', () => {
    // Select all upvote buttons
    const upvoteButtons = document.querySelectorAll('.upvote');
    const downvoteButtons = document.querySelectorAll('.downvote');

    if (upvoteButtons.length === 0 && downvoteButtons.length === 0) {
        console.warn("No vote buttons found.");
        return;
    }

    // Add event listeners for upvote buttons
    upvoteButtons.forEach(button => {
        button.addEventListener('click', () => {
            const postId = button.getAttribute('data-id');
            handleVote(postId, 'upvote');
        });
    });

    // Add event listeners for downvote buttons
    downvoteButtons.forEach(button => {
        button.addEventListener('click', () => {
            const postId = button.getAttribute('data-id');
            handleVote(postId, 'downvote');
        });
    });
});

// Function to handle the voting process
function handleVote(postId, voteType) {
    fetch('/addvote', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ postId, voteType })
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log(`Vote processed successfully: ${data.message}`);
                updateVoteDisplay(postId, voteType, data.message);
            } else {
                console.error(`Error processing vote: ${data.message}`);
            }
        })
        .catch(err => console.error("Error communicating with the server:", err));
}

// Function to update the vote display dynamically
function updateVoteDisplay(postId, voteType, actionMessage) {
    const postElement = document.querySelector(`[data-id="${postId}"]`).closest('.post');

    if (!postElement) {
        console.error(`Post element with ID ${postId} not found.`);
        return;
    }

    // Find the counters
    const upvoteCounter = postElement.querySelector('.upvote-count');
    const downvoteCounter = postElement.querySelector('.downvote-count');

    if (!upvoteCounter || !downvoteCounter) {
        console.error("Upvote or downvote counter not found in post element.");
        return;
    }

    // Parse current counts with fallbacks
    let upvotes = parseInt(upvoteCounter.textContent, 10) || 0;
    let downvotes = parseInt(downvoteCounter.textContent, 10) || 0;

    console.log(`Before update - Upvotes: ${upvotes}, Downvotes: ${downvotes}`);

    // Adjust counts based on the server response
    if (actionMessage === "Vote added") {
        if (voteType === 'upvote') {
            upvotes++;
        } else {
            downvotes++;
        }
    } else if (actionMessage === "Vote removed") {
        if (voteType === 'upvote') {
            upvotes--;
        } else {
            downvotes--;
        }
    } else if (actionMessage === "Vote updated") {
        if (voteType === 'upvote') {
            upvotes++;
            downvotes--;
        } else {
            downvotes++;
            upvotes--;
        }
    }

    console.log(`After update - Upvotes: ${upvotes}, Downvotes: ${downvotes}`);

    // Update the DOM with the new counts
    upvoteCounter.textContent = upvotes;
    downvoteCounter.textContent = downvotes;
}



</script>

</html>
